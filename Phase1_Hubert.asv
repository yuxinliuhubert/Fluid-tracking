% M_particle = (SRD+RDD)/(SRD+y0); % magnification of particle
%% Data Input
SRD = 1; % m, Source-Reference Distance
RDD = 1; % m, Reference-Detector (screen) Distance
theta_degree = 30; % clock-wise degree, what is the angle of camera rotation before each shot
NOS = 10; % number of shots
D = 1e-4; % m, diameter of the fluid element, assuming 3D sphere/2D circle
delta_T = 1; % s, time between shots
a = [0 0]; % m/s^2, fluid element acceleration
% % True location of particle; could be negative number
x0 = 0.1; % m, relative to reference
y0 = 0.1; % m
noise=5e-4; %the maximum possible deviation of the projection measurement from the perfect measurement 

%% Calculation part 1: projection generation
theta = theta_degree/180*pi;
%rotated basis  to original basis. For every shot taken, A multiplies by once. 
% projected x input; could be used to create kalman filter with rotation
% matrix to minimize the effect of noise. This version assumes no noise
% from measurement
% M >1

r_now=[x0-D/2; y0];
M_p = (SRD+RDD)/(SRD+r_now(2));
x_proj_L=[M_p*r_now(1)+randn*noise]; %first shot before rotation
%start rotating
for i = 1:NOS-1
  
    r_now=T(r_now,theta); %true location in the newly rotated axes
    M_p = (SRD+RDD)/(SRD+r_now(2)); % magnification of particle
    x_proj_L=[x_proj_L;M_p*r_now(1)+randn*noise];%x_proj=[x_proj; (r_now(1)-D/2)*M_p+randn*noise/2, (r_now(2)+D/2)*M_p+randn*noise/2];
end
r_now=[x0+D/2; y0];
M_p = (SRD+RDD)/(SRD+r_now(2));
x_proj_R=[M_p*r_now(1)+randn*noise]; %first shot before rotation
%start rotating
for i = 1:NOS-1
  
    r_now=T(r_now,theta); %true location in the newly rotated axes
    M_p = (SRD+RDD)/(SRD+r_now(2)); % magnification of particle
    x_proj_R=[x_proj_R;M_p*r_now(1)+randn*noise];%x_proj=[x_proj; (r_now(1)-D/2)*M_p+randn*noise/2, (r_now(2)+D/2)*M_p+randn*noise/2];
end
x_proj=[x_proj_L,x_proj_R];
r0_predicted=proj2r0(x_proj,theta,SRD,RDD,D)

   %% function for transforming rotating coordinate axes of a given angle alpha and r1=[x1;y1]
   function [r2]=T(r1,alpha)
   r2=[cos(-alpha) -sin(-alpha); sin(-alpha) cos(-alpha)]*r1;
   end
   
   function [r0]= proj2r0(proj,theta,SRD,RDD,D) %takes in any array of projection coordinates and the angle theta btw the shots and 
   %outputs the predicted x0 y0 sets in coordinates when theta=0 (original
   %position) r0=[x0_1, y0_1; x0_2,y0_2;.....]

   r0=zeros(length(proj),2);
       for i = 1:length(proj)
           xi_L=proj(i,1); xi_R=proj(i,2); alpha=2*i*theta-theta;
           y_0=D*(SRD+RDD)/(xi_R-xi_L) -SRD;
           M_p = (SRD+RDD)/(SRD+y_0);
           x_0_L=xi_L/M_p; x_0_R=xi_R/M_p; 
           x_0=(x_0_L+x_0_R)/2;
           r0(i,:)=(T([x_0;y_0],-alpha))';

            
          
       end
   function [r2]=T(r1,alpha)
   r2=[cos(-alpha) -sin(-alpha); sin(-alpha) cos(-alpha)]*r1;
   end
   end
